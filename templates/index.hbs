<div id="lasers"></div>

<main>
  <h1> RAVE MOM </h1>
  <a href="/tracks"> ADD NEW TRAX </a>
  <div class="controls-container">

    <div> 
      <audio id="audioPlayer" controls>
        <source id="audioSource" type="audio/mpeg">
      </audio>
      <button onClick="playPreviousTrack()">prev</button>
      <button onClick="playNextTrack()">next</button>
    </div>

    <div>
      <p id="currentTrackDisplay"> Album Name - Current Track Name </p>
      <div id="ratingControls" hx-get="/rating_controls" hx-trigger="DOMSubtreeModified from:#audioSource" hx-vals='js:{uuid: playlist[currentlyPlaying].uuid}'> </div>
    </div>

  </div>

  <div id="trackList"> </div>
</main>

<script>
let currentlyPlaying = 0;
let playlist;

async function main() {
  let playlist = await fetch('/playlist').then(res => res.json());

  console.log(playlist)

  document.getElementById('trackList').innerHTML = playlist
    .map((track, index) => trackElement(track, index))
    .join('');
}
main();

function trackElement(track, index) {
  return `
    <div class="track" onClick={playSong(${index})}>
      <div>
        <p> ${track.filename}</p>
        <p class="albumTitle"> ${track.album} : ${track.upvotes} upvotes | ${track.times_listened} listens</p>
      </div>
    </div>
  `;
}

function playSong(trackIndex) {
  currentlyPlaying = trackIndex;
  const track = playlist[trackIndex];

  audioSource.src = `/track/${encodeURIComponent(track.album)}/${encodeURIComponent(track.filename)}`;
  audioPlayer.load();
  audioPlayer.play();

  const trackElements = document.querySelectorAll('.track');
  trackElements.forEach(track => track.classList.remove('currently-playing'));
  trackElements[trackIndex].classList.add('currently-playing');

  document.getElementById('currentTrackDisplay').innerHTML = `${track.album} - ${track.filename}`;
}

function voteCurrentTrack(direction) {
  if (playlist[currentlyPlaying]) {
    vote(playlist[currentlyPlaying].uuid, direction);
  }
}

function deleteCurrentTrack() {
  if (playlist[currentlyPlaying]) {
    deleteTrack(playlist[currentlyPlaying].uuid);
  }
}

function vote(uuid, direction) {
  fetch('/vote', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ uuid, direction })
  });
}

function deleteTrack(uuid) {
  fetch('/deleteTrack', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ uuid })
  });
}

audioPlayer.addEventListener('ended', () => {
  fetch('/listened', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ uuid: playlist[currentlyPlaying].uuid })
  });
  playNextTrack();
});

function playNextTrack() {
  if (currentlyPlaying < playlist.length - 1 ) {
    playSong(currentlyPlaying + 1);
  } 
}

function playPreviousTrack() {
  if (0 < currentlyPlaying) {
    playSong(currentlyPlaying - 1);
  }
}
</script>
